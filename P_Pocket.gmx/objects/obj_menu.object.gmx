<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Carpetas

//carpetas
nFolders = 7;
var _n = 0, _obj = obj_sprite;
folder[_n] = instance_create(0, 0, obj_folder); //Sprites
with(folder[_n]){
    name = "Sprites";
    subType = 0;
    nFiles = 2; 
    for(var i = 0; i &lt;= 1; i++){
        file[i] = instance_create(0, 0, _obj); with(file[i]){type = other.subType; name = string_copy(string_lower(other.name), 1, string_length(other.name)-1) +string(i+1); padre = other} 
    }
}
    
_n++; _obj = obj_sound; folder[_n] = instance_create(0, 0, obj_folder); //Sounds
with(folder[_n]){
    name = "Sounds";
    subType = 1;
    nFiles = 2; 
    for(var i = 0; i &lt;= 1; i++){
        file[i] = instance_create(0, 0, _obj); with(file[i]){type = other.subType; name = string_copy(string_lower(other.name), 1, string_length(other.name)-1) +string(i+1); padre = other} 
    }
}
    
_n++; _obj = obj_background; folder[_n] = instance_create(0, 0, obj_folder); //Backgrounds
with(folder[_n]){
    name = "Backgrounds";
    subType = 2;
    nFiles = 2; 
    for(var i = 0; i &lt;= 1; i++){
        file[i] = instance_create(0, 0, _obj); with(file[i]){type = other.subType; name = string_copy(string_lower(other.name), 1, string_length(other.name)-1) +string(i+1); padre = other} 
    }
}

_n++; _obj = obj_script; folder[_n] = instance_create(0, 0, obj_folder); //Scripts
with(folder[_n]){
    name = "Scripts";
    subType = 3;
    nFiles = 2; 
    for(var i = 0; i &lt;= 1; i++){
        file[i] = instance_create(0, 0, _obj); with(file[i]){type = other.subType; name = string_copy(string_lower(other.name), 1, string_length(other.name)-1) +string(i+1); padre = other} 
    }
}

_n++; _obj = obj_font; folder[_n] = instance_create(0, 0, obj_folder); //Fonts
with(folder[_n]){
    name = "Fonts";
    subType = 4;
    nFiles = 2; 
    for(var i = 0; i &lt;= 1; i++){
        file[i] = instance_create(0, 0, _obj); with(file[i]){type = other.subType; name = string_copy(string_lower(other.name), 1, string_length(other.name)-1) +string(i+1); padre = other} 
    }
}

_n++; _obj = obj_objects; folder[_n] = instance_create(0, 0, obj_folder); //Objects
with(folder[_n]){
    name = "Objects";
    subType = 5;
    nFiles = 2; 
    for(var i = 0; i &lt;= 1; i++){
        file[i] = instance_create(0, 0, _obj); with(file[i]){type = other.subType; name = string_copy(string_lower(other.name), 1, string_length(other.name)-1) +string(i+1); padre = other} 
    }
}

_n++; _obj = obj_room; folder[_n] = instance_create(0, 0, obj_folder); //Rooms
with(folder[_n]){
    name = "Rooms";
    subType = 6;
    nFiles = 2; 
    for(var i = 0; i &lt;= 1; i++){
        file[i] = instance_create(0, 0, _obj); with(file[i]){type = other.subType; name = string_copy(string_lower(other.name), 1, string_length(other.name)-1) +string(i+1); padre = other} 
    }
}
    
//Seleccion
selTreeI = -1;
selTreeJ = -1;
toMove = -1;

//interactuar Arbol
toEdit = 0;
strEdit = "";

//interactuar Object
applyObjEdit = false;
toObjEdit = 0;
typeObjEdit = 0; //1 caja de texto //2 lista desplegable
selObjArr[0] = noone;
selObjArrMax = 0;
selObjArrOpen = false;








</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Barra de tareas

nTareas = 2; 
tareaSel = 0;

tarea[0, 0] = 0; //arbol
tarea[0, 1] = -1; //0=menu
tarea[0, 2] = 0; //0=menu

tarea[1, 0] = folder[5].file[0]; //objeto
tarea[1, 1] = -1; //0=menu
tarea[1, 2] = 0; //lineSel

tarea[1, 0].nEvents = 2;
tarea[1, 0].events[0] = 0//id evento
//tarea[1, 0].events[0, 1] = 0//id evento

//animaci√≥n
showTextCursor = true;
textLastKey = vk_nokey;

//Seleccionar lineas de codigo

//rowSelMax = 0;
//rowSel[5] = 0;
rowSelStt = 3;
rowSelSttRow = 4;
rowSelEnd = 6;
rowSelEndRow = 4;

/*rowSelStt = 0;
rowSelSttRow = -1;
rowSelEnd = 0;
rowSelEndRow = -1;*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wait to write


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///showTextCursor

if (showTextCursor = true){
    showTextCursor = false;
}
else{
    showTextCursor = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu

draw_set_color(c_white);
for(i = 0; i &lt; 3; i++){
    var x1 = rw/3*i, x2 = rw/3*(i+1), y1 = 40;
    draw_rectangle(x1, 0, x2, y1, 1);
    draw_sprite_ext(spr_menuIcons, (i*2), (x1+x2)/2, y1/2, 1.5, 1.5, 0, c_white, 1);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Barra de tareas

var _gr = 0, _xm = 0, _x2, _txt = "";
for(i = 0; i &lt; nTareas; i++){
    if (i = 0){
        _txt = "Arbol";
    }
    else{
        _txt = tarea[i, 0].name;
    }
    _x2 = string_width(_txt)+15;
    draw_rectangle(_xm, 40, _xm+_x2, 40+40, 1);
    draw_text(_xm+4, 40+4, _txt);
    
    
    if mouse_check_button_pressed(mb_left){
        if point_in_rectangle(mouse_x, mouse_y, _xm, 40, _xm+_x2, 40+40){
            tareaSel = i;
        }
    }
    
    _xm += _x2;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pantallas

if (tareaSel = 0){
    scr_ArbolDeRecursos();
}
else{
    switch(tarea[tareaSel,0].type){
    
        //script
        case 3:{ 
            
            //rectangulo lista de lineas
            draw_set_color(c_dkgray);
            draw_rectangle(0, 90, 24, rh, 0);
            draw_set_font(fnt_2);
            
            for(i = 0; i &lt; tarea[tareaSel,0].maxLine; i++){
                
                draw_set_halign(fa_right);
                if (tarea[tareaSel,0].lineSel != i){ //deselect
                    draw_set_color(c_white);
                    draw_text(19, 90+18*i, string(i+1));
                }
                else{ //seleccionado
                
                    //dibujar numero en rojo
                    draw_set_font(fnt_2B);
                    draw_set_color(merge_color(c_white, c_red, 0.3));
                    draw_text(19, 90+18*i, string(i+1));  
                    draw_set_font(fnt_2);
                    
                    if (rowSelSttRow = -1){
                        //rectangulo de seleccionado
                        draw_set_color(c_white);
                        draw_set_alpha(0.2);
                        draw_rectangle(25, 90+18*i, rw, 90+18*(i+1), 0);
                        draw_set_alpha(1);
                        
                        //dibujar cursor
                        if (showTextCursor){
                            draw_set_color(scr_wordColor(0));
                            draw_set_font(fnt_2);
                            //draw_rectangle(28 +string_width(tarea[tareaSel,0].code[i]), 90+18*i, 28 +string_width(tarea[tareaSel,0].code[i])+1, 90+18*(i+1), 0);
                            draw_rectangle(28 +string_width(string_copy(tarea[tareaSel,0].code[i],1,tarea[tareaSel,0].writeChar)), 90+18*i, 28 +string_width(string_copy(tarea[tareaSel,0].code[i],1,tarea[tareaSel,0].writeChar))+1, 90+18*(i+1), 0);
                        }
                    }
                    
                    //bucle cursor
                    if (alarm[0] = -1){
                        alarm[0] = room_speed/2;
                    }
                    
                    //escribir con teclado(solo pc)
                    if (keyboard_check(vk_anykey)){
                    
                        if (keyboard_key != textLastKey){ //poder escribir cualquier otra letra distinta
                            alarm[1] = -1;
                        }
                        
                        switch(keyboard_key){
                            case vk_home:{ //inicio
                                if (alarm[1] = -1){
                                    if (keyboard_check(vk_shift)){
                                        if (rowSelSttRow = -1){
                                            rowSelSttRow = tarea[tareaSel,0].lineSel;
                                            rowSelEndRow = rowSelSttRow;
                                            rowSelStt = tarea[tareaSel,0].writeChar;
                                        }
                                        rowSelEnd = 0;
                                    }
                                
                                    tarea[tareaSel,0].writeChar = 0;
                                    
                                    showTextCursor = true; //cursor
                                    alarm[0] = room_speed;
                                    
                                    if (keyboard_lastkey != textLastKey) //waitToWrite
                                        alarm[1] = room_speed/2;
                                    else 
                                        alarm[1] = room_speed/20;
                                }
                            }break;
                            case vk_end:{ //fin
                                if (alarm[1] = -1){
                                    if (keyboard_check(vk_shift)){
                                        if (rowSelSttRow = -1){
                                            rowSelSttRow = tarea[tareaSel,0].lineSel;
                                            rowSelEndRow = rowSelSttRow;
                                            rowSelStt = tarea[tareaSel,0].writeChar;
                                        }
                                        rowSelEnd = string_length(tarea[tareaSel,0].code[i]);
                                    }
                                
                                    tarea[tareaSel,0].writeChar = string_length(tarea[tareaSel,0].code[i]);
                                    showTextCursor = true; //cursor
                                    alarm[0] = room_speed;
                                    
                                    if (keyboard_lastkey != textLastKey) //waitToWrite
                                        alarm[1] = room_speed/2;
                                    else 
                                        alarm[1] = room_speed/20;
                                }
                            }break;
                            case vk_tab: //tabulador
                                if (alarm[1] = -1){
                                    tarea[tareaSel,0].code[i] = string_insert("    ", tarea[tareaSel,0].code[i], tarea[tareaSel,0].writeChar+1);
                                    //tarea[tareaSel,0].code[i] += "    ";
                                    tarea[tareaSel,0].writeChar += 4;
                                    showTextCursor = true; //cursor
                                    alarm[0] = room_speed;
                                    
                                    if (keyboard_lastkey != textLastKey) //waitToWrite
                                        alarm[1] = room_speed/2;
                                    else 
                                        alarm[1] = room_speed/20;
                                }
                            break;
                            case vk_enter: //crear nueva linea y correr todo
                                if (alarm[1] = -1){
                                    for(var k = tarea[tareaSel,0].maxLine; k &gt; i; k--){
                                        tarea[tareaSel,0].code[k] = tarea[tareaSel,0].code[k-1];
                                    }
                                    
                                    //espaciado
                                    for(var h = 0; h &lt;= string_length(tarea[tareaSel,0].code[k]); h++){
                                        if (string_char_at(tarea[tareaSel,0].code[k], h) != " "){
                                            break;
                                        }
                                    }
                                    h--;
                                    
                                    //a√±adir espaciado
                                    tarea[tareaSel,0].code[k+1] = "";
                                    repeat(h){ 
                                        tarea[tareaSel,0].code[k+1] += " ";
                                    }//show_message(h);
                                    
                                    tarea[tareaSel,0].code[k+1] += string_copy(tarea[tareaSel,0].code[k], tarea[tareaSel,0].writeChar+1, string_length(tarea[tareaSel,0].code[k])-tarea[tareaSel,0].writeChar);
                                    tarea[tareaSel,0].lineSel = i+1; //bajar cursor
                                    tarea[tareaSel,0].maxLine += 1; //aumentar maximo
                                    
                                    //quitar el pedazo
                                    tarea[tareaSel,0].code[k] = string_delete(tarea[tareaSel,0].code[k], tarea[tareaSel,0].writeChar+1, string_length(tarea[tareaSel,0].code[k])-tarea[tareaSel,0].writeChar);
                                    tarea[tareaSel,0].writeChar = max(h, 0); //limitar h
                                    
                                    showTextCursor = true; //cursor
                                    alarm[0] = room_speed;
                                    
                                    if (keyboard_lastkey != textLastKey) //waitToWrite
                                        alarm[1] = room_speed/2;
                                    else 
                                        alarm[1] = room_speed/20;
                                }
                            break;
                            case vk_up: //subir de linea
                                if (alarm[1] = -1){
                                    if (i &gt; 0){
                                        tarea[tareaSel,0].lineSel = i-1;
                                        
                                        //ajustar writeChar
                                        if (tarea[tareaSel,0].writeChar &gt; string_length(tarea[tareaSel,0].code[tarea[tareaSel,0].lineSel])){
                                            tarea[tareaSel,0].writeChar = string_length(tarea[tareaSel,0].code[tarea[tareaSel,0].lineSel]);
                                        }
                                        
                                        //Seleccionar con shift (Subir)
                                        if (keyboard_check(vk_shift)){
                                            if (rowSelSttRow = -1){
                                                rowSelSttRow = i;
                                                rowSelStt = tarea[tareaSel,0].writeChar;
                                            
                                                rowSelEndRow = tarea[tareaSel,0].lineSel;
                                                rowSelEnd = tarea[tareaSel,0].writeChar;
                                                
                                                //rowSelEndRow = rowSelSttRow;
                                                //rowSelEnd = rowSelStt;
                                                
                                                //rowSelSttRow = tarea[tareaSel,0].lineSel;
                                                //rowSelStt = 0;
                                            }
                                            else{
                                                rowSelEndRow = tarea[tareaSel,0].lineSel;
                                                rowSelEnd = tarea[tareaSel,0].writeChar;
                                            }
                                            //rowSelMax += 1;
                                        }
                                        else{ //deseleccionar shift
                                            rowSelStt = 0; //resetear rowSel
                                            rowSelSttRow = -1;
                                            rowSelEnd = 0;
                                            rowSelEndRow = -1;
                                        }
                                        
                                        showTextCursor = true; //cursor
                                        alarm[0] = room_speed;
                                        
                                        if (keyboard_lastkey != textLastKey) //waitToWrite
                                            alarm[1] = room_speed/2;
                                        else 
                                            alarm[1] = room_speed/20;
                                    }
                                }
                            break;
                            case vk_down: //bajar de linea
                                if (alarm[1] = -1){
                                    if (i &lt; (tarea[tareaSel,0].maxLine-1)){
                                    
                                        //Seleccionar con shift
                                        if (keyboard_check(vk_shift)) and (rowSelSttRow = -1){
                                            rowSelSttRow = i;
                                            rowSelStt = tarea[tareaSel,0].writeChar;
                                        }
                                        
                                        tarea[tareaSel,0].lineSel = i+1;
                                        
                                        //ajustar writeChar
                                        if (tarea[tareaSel,0].writeChar &gt; string_length(tarea[tareaSel,0].code[tarea[tareaSel,0].lineSel])){
                                            tarea[tareaSel,0].writeChar = string_length(tarea[tareaSel,0].code[tarea[tareaSel,0].lineSel]);
                                        }
                                        
                                        //Seleccionar con shift
                                        if (keyboard_check(vk_shift)){
                                            rowSelEndRow = tarea[tareaSel,0].lineSel;
                                            rowSelEnd = tarea[tareaSel,0].writeChar;
                                            //rowSelMax += 1;
                                        }
                                        else{ //deseleccionar shift
                                            rowSelStt = 0; //resetear rowSel
                                            rowSelSttRow = -1;
                                            rowSelEnd = 0;
                                            rowSelEndRow = -1;
                                        }
                                        
                                        showTextCursor = true; //cursor
                                        alarm[0] = room_speed;
                                        
                                        if (keyboard_lastkey != textLastKey) //waitToWrite
                                            alarm[1] = room_speed/2;
                                        else 
                                            alarm[1] = room_speed/20;
                                    }
                                }
                            break;
                            case vk_left:{ //pasar writeChar izquierda
                                if (alarm[1] = -1){
                                    if (tarea[tareaSel,0].writeChar &gt; 0){
                                        tarea[tareaSel,0].writeChar --;
                                        
                                        if (keyboard_check(vk_shift)){
                                            if (rowSelSttRow = -1){
                                                rowSelSttRow = tarea[tareaSel,0].lineSel
                                                rowSelEndRow = rowSelSttRow;
                                                rowSelStt = tarea[tareaSel,0].writeChar+1;
                                            }
                                            rowSelEnd = tarea[tareaSel,0].writeChar
                                        }
                                        
                                        showTextCursor = true; //cursor
                                        alarm[0] = room_speed;
                                        
                                        if (keyboard_lastkey != textLastKey) //waitToWrite
                                            alarm[1] = room_speed/2;
                                        else 
                                            alarm[1] = 0;
                                    }
                                    
                                    //deseleccionar shift
                                    if (!keyboard_check(vk_shift)) &amp;&amp; (rowSelSttRow != -1){
                                        rowSelStt = 0; //resetear rowSel
                                        rowSelSttRow = -1;
                                        rowSelEnd = 0;
                                        rowSelEndRow = -1;
                                    }
                                    /*else{
                                        rowSelEnd = tarea[tareaSel,0].writeChar;
                                    }*/
                                }
                            }break;
                            case vk_right:{ //pasar writeChar derecha
                                if (alarm[1] = -1){
                                    if (tarea[tareaSel,0].writeChar &lt; string_length(tarea[tareaSel,0].code[i])){
                                        tarea[tareaSel,0].writeChar ++;
                                        
                                        if (keyboard_check(vk_shift)){
                                            if (rowSelSttRow = -1){
                                                rowSelSttRow = tarea[tareaSel,0].lineSel
                                                rowSelEndRow = rowSelSttRow;
                                                rowSelStt = tarea[tareaSel,0].writeChar-1;
                                            }
                                            rowSelEnd = tarea[tareaSel,0].writeChar;
                                        }
                                        
                                        showTextCursor = true; //cursor
                                        alarm[0] = room_speed;
                                            
                                        if (keyboard_lastkey != textLastKey) //waitToWrite
                                            alarm[1] = room_speed/2;
                                        else 
                                            alarm[1] = 0;
                                    }
                                    
                                    //deseleccionar shift
                                    if (!keyboard_check(vk_shift)) &amp;&amp; (rowSelSttRow != -1){
                                        rowSelStt = 0; //resetear rowSel
                                        rowSelSttRow = -1;
                                        rowSelEnd = 0;
                                        rowSelEndRow = -1;
                                    }
                                    /*else{
                                        rowSelEnd = tarea[tareaSel,0].writeChar;
                                    }*/
                                }
                            }break;
                            case vk_backspace: //borrar
                                if (alarm[1] = -1){
                                    if (tarea[tareaSel,0].code[i] != "") and (tarea[tareaSel,0].writeChar &gt; 0){
                                        tarea[tareaSel,0].code[i] = string_delete(tarea[tareaSel,0].code[i], tarea[tareaSel,0].writeChar, 1);
                                        tarea[tareaSel,0].writeChar--;
                                    }
                                    else if (i &gt; 0){ //eliminar linea
                                        tarea[tareaSel,0].writeChar = string_length(tarea[tareaSel,0].code[i-1]); //poner cursor en el anterior
                                        tarea[tareaSel,0].code[i-1] += tarea[tareaSel,0].code[i]; //subir el texto
                                        
                                        for(var k = i; k &lt; tarea[tareaSel,0].maxLine-1; k++){
                                            tarea[tareaSel,0].code[k] = tarea[tareaSel,0].code[k+1];
                                        }
                                        
                                        tarea[tareaSel,0].code[tarea[tareaSel,0].maxLine-1] = ""; //borrarUltimo
                                        tarea[tareaSel,0].maxLine -= 1; //disminuirMax
                                        tarea[tareaSel,0].lineSel = i-1; //reposicionar
                                        
                                    }
                                    
                                    showTextCursor = true; //cursor
                                    alarm[0] = room_speed;
                                    
                                    if (keyboard_lastkey != textLastKey) //waitToWrite
                                        alarm[1] = room_speed/2;
                                    else 
                                        alarm[1] = -1;//room_speed/30;
                                }
                            break;
                            default: //escribir
                                if (alarm[1] = -1){
                                    if (keyboard_string != ""){ //Escribir algo
                                        tarea[tareaSel,0].code[i] = string_insert(string_char_at(keyboard_string, 1), tarea[tareaSel,0].code[i], tarea[tareaSel,0].writeChar+1);
                                        tarea[tareaSel,0].writeChar++;
                                        //tarea[tareaSel,0].code[i] += keyboard_string;//lastchar;
                                        keyboard_string = "";
                                        showTextCursor = true; //cursor
                                        alarm[0] = room_speed;
                                        if (keyboard_lastkey != textLastKey) //waitToWrite
                                            alarm[1] = room_speed/2;
                                        else 
                                            alarm[1] = -1;//room_speed/30;
                                    }
                                }
                            break;
                        }
                        textLastKey = keyboard_key; //guardar lastkey
                    }
                    else{ //resetear wait to write
                        alarm[1] = -1;
                        textLastKey = vk_nokey; 
                    }
                }
                
                //dibujar sel
                if (i &gt;= rowSelSttRow &amp;&amp; i &lt;= rowSelEndRow) or (i &lt;= rowSelSttRow &amp;&amp; i &gt;= rowSelEndRow){
                    draw_set_color(c_white);
                    draw_set_alpha(0.5);
                    
                    if (rowSelSttRow = rowSelEndRow){ //(i = rowSelSttRow &amp;&amp; i = rowSelEndRow){
                        draw_rectangle(28+string_width(string_copy(tarea[tareaSel,0].code[i], 1, rowSelStt)), 90+18*i, 28+string_width(string_copy(tarea[tareaSel,0].code[i], 1, tarea[tareaSel,0].writeChar/*rowSelEnd*/)), 90+18*(i+1), 0);
                    }
                    else{
                        if (rowSelSttRow &lt; rowSelEndRow){ //Stt - End
                            switch(i){
                                case rowSelSttRow:
                                    draw_rectangle(28+string_width(string_copy(tarea[tareaSel,0].code[i], 1, rowSelStt)), 90+18*i, rw, 90+18*(i+1), 0);
                                break;
                                case rowSelEndRow:
                                    draw_rectangle(28, 90+18*i, 28+string_width(string_copy(tarea[tareaSel,0].code[i], 1, tarea[tareaSel,0].writeChar/*rowSelEnd*/)), 90+18*(i+1), 0);
                                break;
                                default:
                                    draw_rectangle(28, 90+18*i, rw, 90+18*(i+1), 0);
                                break;
                            }
                        }
                        else{ //End - Stt
                            switch(i){
                                case rowSelSttRow:
                                    draw_rectangle(28, 90+18*i, 28+string_width(string_copy(tarea[tareaSel,0].code[i], 1, /*tarea[tareaSel,0].writeChar*/rowSelStt)), 90+18*(i+1), 0);
                                break;
                                case rowSelEndRow:
                                    draw_rectangle(28+string_width(string_copy(tarea[tareaSel,0].code[i], 1, rowSelEnd)), 90+18*i, rw, 90+18*(i+1), 0);
                                break;
                                default:
                                    draw_rectangle(28, 90+18*i, rw, 90+18*(i+1), 0);
                                break;
                            }
                        }
                    }
                    draw_set_alpha(1);
                }
                 
                //dibujar texto con colorines
                draw_set_halign(fa_left);
                draw_set_font(fnt_2);
                scr_drawCode(28, 90+18*i, tarea[tareaSel,0].code[i]);
                
                //interactuar (improvisado)
                if (mouse_check_button_pressed(mb_left)){
                    if (point_in_rectangle(mouse_x, mouse_y, 0, 90+18*i, rw, 90+18*(i+1))){
                        tarea[tareaSel,0].lineSel = i;
                        keyboard_string = "";
                        showTextCursor = true; //cursor
                        alarm[0] = room_speed;
                        //tarea[tareaSel,0].writeChar = 
                        
                        for(var k = 0; k &lt; string_length(tarea[tareaSel,0].code[i]); k++){
                            if (mouse_x &lt; (28+string_width(string_copy(tarea[tareaSel,0].code[i], 1, k)))){
                                
                                if (abs(mouse_x-(28+string_width(string_copy(tarea[tareaSel,0].code[i], 1, k)))) &gt; string_width("a")/2){
                                    k--;
                                }
                                break;
                            }
                        }
                        tarea[tareaSel,0].writeChar = k;
                        
                        //resetear rowSel
                        rowSelStt = 0;
                        rowSelSttRow = -1;
                        rowSelEnd = 0;
                        rowSelEndRow = -1;
                    }
                }
                
                /*/Seleccionar con shift
                if (keyboard_check(vk_shift)){
                    if (keyboard_check_pressed(vk_up)){
                        rowSelEnd = writeChar;
                        rowSelStt = 
                    }
                }*/
                
            } //fuera de for
            
            //Debug
            draw_set_color(c_white);
            draw_text(0, 20*2, "writeChar: "+string(tarea[tareaSel,0].writeChar));
            draw_text(0, 20*3, "rowSelStt: "+string(rowSelStt));
            draw_text(0, 20*4, "rowSelSttRow: "+string(rowSelSttRow));
            draw_text(0, 20*5, "rowSelEnd: "+string(rowSelEnd));
            draw_text(0, 20*6, "rowSelEndRow: "+string(rowSelEndRow));
        }break;
        
        //object
        case 5:{
        
            //interactuar
            if (typeObjEdit != 0){
                switch(typeObjEdit){
                
                    //Editor de texto 
                    case 1: 
                        var _on = scr_textEditor( 50);
                        if (_on = 1){
                            strEdit = ""; typeObjEdit = 0;
                        }
                        else if (_on = 2){  
                            //recoger strEdit para aplicarlo
                            applyObjEdit = true;
                            typeObjEdit = 0;
                        }
                    break;
                    
                    //Caja desplegable
                    case 2: 
                        var _on = scr_listSelecter( 50);
                        if (_on = 1){
                            strEdit = ""; typeObjEdit = 0;
                        }
                        else if (_on = 2){ 
                            //recoger strEdit para aplicarlo
                            applyObjEdit = true; 
                            typeObjEdit = 0;
                        }
                    break;
                    
                    //Check box
                    case 3: 
                    break;
                }
            }
        
        
            draw_set_font(fnt_3);
            //sistema de listas
            
            //constantes
            var
            _x1 = 15,
            _x2 = rw-15,
            _sep = 12, //separador
            _anc = 20, //ancho
            _txtYa = 1; //Text Y Add
            
            //variables
            var 
            _ym = 0,
            _n = 0; //contador
            
            
            _n += 1;
            var _txt = "Name:  ",
            _ym = 100;
            
            //name
            draw_set_color(c_white);
            draw_text(_x1, _ym +_txtYa, _txt);
            //caja de texto
            draw_set_color(c_white);
            draw_rectangle(_x1 + string_width(_txt), _ym, _x2, _ym +_anc, 0)
            //texto
            draw_set_color(c_black);
            draw_text(_x1 +5 + string_width(_txt), _ym +_txtYa, tarea[tareaSel,0].name);
            //action
            if (mouse_check_button_pressed(mb_left) and point_in_rectangle(mouse_x, mouse_y, _x1 + string_width(_txt), _ym, _x2, _ym +_anc)){
                toObjEdit = _n;
                
                strEdit = tarea[tareaSel,0].name;
                typeObjEdit = 1;
            }
            if (toObjEdit = _n &amp;&amp; applyObjEdit){
                tarea[tareaSel,0].name = strEdit;
                applyObjEdit = false; toObjEdit = 0; strEdit = "";
            }
            
            _n += 1;
            _txt = "Sprite:  ";
            _ym += _anc + _sep;
            
            //sprite
            draw_set_color(c_white);
            draw_text(_x1, _ym +_txtYa, _txt);
            //caja de texto
            draw_set_color(c_white);
            draw_rectangle(_x1 + string_width(_txt), _ym, _x2, _ym +_anc, 0)
            //texto
            draw_set_color(c_black);
            draw_text(_x1 +5 + string_width(_txt), _ym +_txtYa, tarea[tareaSel,0].sprite);
            //action
            if (mouse_check_button_pressed(mb_left) and point_in_rectangle(mouse_x, mouse_y, _x1 + string_width(_txt), _ym, _x2, _ym +_anc)){
                toObjEdit = _n;
                
                //limpiar
                for(var i = 0; i &lt; array_length_1d(selObjArr); i++){
                    selObjArr[i] = noone;
                }
                //asignar
                typeObjEdit = 2;
                selObjArr[0] = "spr_pacman";
                selObjArr[1] = "spr_sonic"; 
                selObjArr[2] = "spr_marioDeluxe";
                selObjArrMax = 3;
            
                strEdit = tarea[tareaSel,0].sprite;
            }
            if (toObjEdit = _n &amp;&amp; applyObjEdit){
                tarea[tareaSel,0].sprite = strEdit;
                applyObjEdit = false; toObjEdit = 0; strEdit = "";
            }
            
            _n += 1;
            _txt = "Visible:  ";
            _ym += _anc + _sep;
            
            //visible
            draw_set_color(c_white);
            draw_text(_x1, _ym +_txtYa, _txt);
            //caja de texto
            draw_set_color(c_white);
            draw_rectangle(_x1 + string_width(_txt), _ym, _x2, _ym +_anc, 0)
            //texto
            draw_set_color(c_black);
            draw_text(_x1 +5 + string_width(_txt), _ym +_txtYa, tarea[tareaSel,0].visible);
            //action
            if (mouse_check_button_pressed(mb_left) and point_in_rectangle(mouse_x, mouse_y, _x1 + string_width(_txt), _ym, _x2, _ym +_anc)){
                toObjEdit = _n;
                
                //limpiar
                for(var i = 0; i &lt; array_length_1d(selObjArr); i++){
                    selObjArr[i] = noone;
                }
                //asignar
                typeObjEdit = 2;
                selObjArr[0] = false;
                selObjArr[1] = true; 
                selObjArrMax = 2;
            
                strEdit = tarea[tareaSel,0].visible;
            }
            if (toObjEdit = _n &amp;&amp; applyObjEdit){
                tarea[tareaSel,0].visible = strEdit;
                applyObjEdit = false; toObjEdit = 0; strEdit = "";
            }
            
            _n += 1;
            _txt = "Depth:  ";
            _ym += _anc + _sep;
            
            //depth
            draw_set_color(c_white);
            draw_text(_x1, _ym +_txtYa, _txt);
            //caja de texto
            draw_set_color(c_white);
            draw_rectangle(_x1 + string_width(_txt), _ym, _x2, _ym +_anc, 0)
            //texto
            draw_set_color(c_black);
            draw_text(_x1 +5 + string_width(_txt), _ym +_txtYa, tarea[tareaSel,0].depth);
            //action
            if (mouse_check_button_pressed(mb_left) and point_in_rectangle(mouse_x, mouse_y, _x1 + string_width(_txt), _ym, _x2, _ym +_anc)){
                toObjEdit = _n;
                
                strEdit = tarea[tareaSel,0].depth;
                typeObjEdit = 1;
            }
            if (toObjEdit = _n &amp;&amp; applyObjEdit){
                tarea[tareaSel,0].depth = strEdit;
                applyObjEdit = false; toObjEdit = 0; strEdit = "";
            }
            
            
        }break;
        
        default:{
            
        }break;
    }
    
    //boton aceptar (eliminar tarea)
    draw_set_color(c_white);
    draw_rectangle(0, rh-40*2, 60, rh-40, 1);
    draw_set_font(fnt_1B);
    draw_text(0, rh-40*2, "Aceptar");
    if mouse_check_button_pressed(mb_left){
        if point_in_rectangle(mouse_x, mouse_y, 0, rh-40*2, 60, rh-40){
            scr_tareaDelete(tareaSel);
        }
    }
}

show_debug_overlay(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
